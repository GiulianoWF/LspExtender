use std::env;
use std::fs::OpenOptions;
use std::io::{self, BufRead, BufReader, Write};
use std::process::{Command, Stdio};
use std::{thread};
use serde::{Serialize, Deserialize};
use serde_json::Value;
use serde_json::Result;
use lsp_types::{
    TextDocumentPositionParams, Hover, HoverContents, MarkupContent, ExecuteCommandParams,
    Command as LspCommand, TextEdit, WorkspaceEdit, Range, Position
};

#[derive(Debug, Serialize, Deserialize)]
struct PartialUser {
    method: Option<String>,
    id: Option<u32>,
    // Use serde_json::Value to ignore the rest of the data
    #[serde(flatten)]
    extra: Option<Value>,
}

fn deserialize_partial_user(json_data: &str) -> Result<PartialUser> {
    let user: PartialUser = serde_json::from_str(json_data)?;
    Ok(user)
}

fn log_char(character: char, log_filename: &str)  {
    let mut file = OpenOptions::new()
        .create(true)
        .append(true)
        .open(log_filename)
        .expect("Failed to open log file");
    writeln!(file, "{}", character).expect("Failed to write char to log file");
}

fn log_message(message: &str, log_filename: &str) {
    // Open the log file with options to create if it doesn't exist and append if it does.
    let mut file = OpenOptions::new()
        .create(true)
        .append(true)
        .open(log_filename)
        .expect("Failed to open log file");

    let debug_message = message.replace("\r", "/r").replace("\n", "/n");
    writeln!(file, "{}", debug_message).expect("Failed to write message to log file");
}

fn read_message(input_stream: &mut impl BufRead, direction: &str) -> io::Result<String> {
    let mut header_line = String::new();
    if input_stream.read_line(&mut header_line)? > 0 {
        let content_length: usize = header_line.trim()
            .split(':')
            .nth(1)
            .expect("Content-Length header not found")
            .trim()
            .parse()
            .expect("Failed to parse content length");

        let mut separator = vec![0; 2]; 
        let _ = input_stream.read_exact(&mut separator);
        let str_separator = String::from_utf8(separator)
            .expect("Failed to read separator");
        header_line.push_str(&str_separator);

        let mut content = vec![0; content_length];
        let _ = input_stream.read_exact(&mut content)?;
        let content = String::from_utf8(content)
            .expect("Failed to convert content to String");

        header_line.push_str(&content);
        
        match deserialize_partial_user(&content) {
            Ok(partial_user) => {
                let log_msg = format!("{}  {}=>{}",
                    direction, 
                    partial_user.id.map_or("".to_string(), |id| id.to_string()), 
                    partial_user.method.map_or("".to_string(), |id| id.to_string()));
                log_message(&log_msg, "/tmp/parsemessages.txt");
            },
            Err(e) => {
                let error_message = format!("{}-{}", direction, e);
                log_message(&error_message, "/tmp/parsemessages.txt");
            }
        }

        let log_msg = format!("{}  {}", direction, content);
        //let log_msg = format!("{}-{}", direction, header_line);
        log_message(&log_msg, "/tmp/messageslsp.txt");
        return Ok(header_line);
    }
    Ok(String::new())
}

fn move_input(input_stream: &mut impl BufRead, to_clangd: &mut std::process::ChildStdin){
        match read_message(input_stream, "vscode:") {
            Ok(response) => {
                to_clangd.write_all(response.as_bytes()).expect("Fail to write");
            },
            Err(e) => eprintln!("Error reading message from clangd: {}", e),
        }
}

fn move_output(from_clangd: &mut BufReader<std::process::ChildStdout>) -> io::Result<()> {
    match read_message(from_clangd, "clangd:") {
        Ok(response) => {
            let stdout = io::stdout();
            let mut handle = stdout.lock();
            handle.write_all(response.as_bytes())?;
            handle.flush()?;
        },
        Err(e) => eprintln!("Error reading message from clangd: {}", e),
    }
    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().skip(1).collect();

    // /home/dechog/.dotfiles/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/bin/clangd
    //let mut clangd = Command::new("clangd-15")
    let mut clangd = Command::new("/home/dechog/.dotfiles/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/bin/clangd")
        .args(&args)
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("Failed to start clangd");

    let mut to_clangd = clangd.stdin.take().expect("Failed to open stdin to clangd");
    let mut from_clangd = BufReader::new(clangd.stdout.take().expect("Failed to open stdout from clangd"));

    let mut input = BufReader::new(io::stdin());

    let input_thread = thread::spawn(move || {
        loop {
            let _ = move_input(&mut input, &mut to_clangd);
        }
    });

    let output_thread = thread::spawn(move || {
        loop {
            let _ = move_output(&mut from_clangd);
        }
    });

    input_thread.join().unwrap();
    output_thread.join().unwrap();

    clangd.wait().expect("Failed to wait on clangd");
}

